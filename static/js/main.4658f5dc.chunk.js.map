{"version":3,"sources":["components/Info.js","components/Main.js","components/Header.js","components/Footer.js","App.js","index.js"],"names":["placeFinder","arr","id","n","length","i","PlaceId","carrierFinder","CarrierId","OutlinedCard","props","Card","className","variant","CardContent","Typography","gutterBottom","carrierOutbound","carrierInbound","component","originName","destinationName","departureOutboundDate","departureInboundDate","nonStop","currencySymbol","price","InfoWrapper","areRoutes","route","Quotes","map","quote","carrierInboundId","carrierInboundIndex","OutboundLeg","DepartureDate","slice","originId","OriginId","carrierOutboundId","CarrierIds","destinationId","DestinationId","originIndex","Places","destinationIndex","carrierOutboundIndex","Carriers","Name","Type","CityName","IataCode","hasOwnProperty","InboundLeg","Direct","Currencies","Symbol","MinPrice","QuoteId","Info","copyResponse","sortOption","value","reverse","reqOptions","method","headers","process","useQueryString","dateToString","date","yyyy","getFullYear","mm","getMonth","dd","getDate","BlueSwitch","withStyles","switchBase","color","backgroundColor","checked","track","Switch","BlueButton","theme","root","Button","Main","useState","currencies","setCurrencies","currency","setCurrency","origin","setOrigin","destination","setDestination","airportOrigin","setAirportOrigin","airportDestination","setAirportDestination","showRoutes","setShowRoutes","Date","originDate","setOriginDate","destDate","setDestDate","obpDate","setObpDate","ibpDate","setIbpDate","slider","setSlider","routeResponse","setRouteResponse","setAreRoutes","setSortOption","useEffect","a","fetch","response","json","newArray","item","Code","label","console","log","fetchCurrencies","options","onInputChange","inputValue","URLSearchParams","query","PlaceName","fetchOrigin","onChange","isSearchable","placeholder","filterOption","fetchDestination","style","width","returnValue","fullDate","minDate","FormControlLabel","control","name","defaultValue","margin","onClick","message","errors","Error","fetchRoute","Header","title","Footer","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2WAMMA,EAAc,SAACC,EAAKC,GAExB,IAAIC,EAAIF,EAAIG,OACRC,EAAI,EACR,IAAKA,EAAI,EAAGA,EAAIF,EAAGE,IACjB,GAAIJ,EAAII,GAAGC,UAAYJ,EACrB,OAAOG,EAGX,OAAO,MAGHE,EAAgB,SAACN,EAAKC,GAE1B,IAAIC,EAAIF,EAAIG,OACRC,EAAI,EACR,IAAKA,EAAI,EAAGA,EAAIF,EAAGE,IACjB,GAAIJ,EAAII,GAAGG,YAAcN,EACvB,OAAOG,EAGX,OAAO,MAGHI,EAAe,SAACC,GAEpB,OACE,8BACE,cAACC,EAAA,EAAD,CAAMC,UAAU,OAAOC,QAAQ,WAA/B,SACE,eAACC,EAAA,EAAD,CAAaF,UAAWF,EAAME,UAA9B,UACE,eAACG,EAAA,EAAD,CAAYH,UAAU,QAAQI,cAAY,EAA1C,UACGN,EAAMO,gBAAiB,IACE,KAAzBP,EAAMQ,eACL,6BADD,cAGQR,EAAMQ,mBAGjB,cAACH,EAAA,EAAD,CAAYF,QAAQ,KAAKM,UAAU,KAAnC,mBACMT,EAAMU,WADZ,eAC6BV,EAAMW,mBAEnC,eAACN,EAAA,EAAD,CAAYH,UAAU,MAAtB,6CAC+BF,EAAMY,uBAAyB,OAE9B,KAA/BZ,EAAMa,qBACL,cAACR,EAAA,EAAD,CAAYH,UAAU,MAAtB,4CAC+BF,EAAMa,wBAGrC,6BACC,IACFb,EAAMc,QAAU,aAAe,GAChC,cAACT,EAAA,EAAD,CAAYF,QAAQ,QAAQM,UAAU,IAAtC,SACGT,EAAMe,eAAiBf,EAAMgB,gBAQpCC,EAAc,SAACjB,GAEnB,OACE,mCACGA,EAAMkB,UACLlB,EAAMmB,MAAMC,OAAOC,KAAI,SAACC,GACtB,IAcIC,EACAC,EACAhB,EACAK,EACAH,EACAC,EAnBAC,EAAwBU,EAAMG,YAAYC,cAAcC,MAC1D,EACA,IAEEC,EAAWN,EAAMG,YAAYI,SAC7BC,EAAoBR,EAAMG,YAAYM,WAAW,GACjDC,EAAgBV,EAAMG,YAAYQ,cAClCC,EAAc5C,EAAYU,EAAMmB,MAAMgB,OAAQP,GAC9CQ,EAAmB9C,EAAYU,EAAMmB,MAAMgB,OAAQH,GACnDK,EAAuBxC,EACzBG,EAAMmB,MAAMmB,SACZR,GAEEvB,EAAkBP,EAAMmB,MAAMmB,SAASD,GAAsBE,KAuCjE,OA9BE7B,EAD2C,YAAzCV,EAAMmB,MAAMgB,OAAOD,GAAaM,KACrBxC,EAAMmB,MAAMgB,OAAOD,GAAaK,KAEnC,UAAMvC,EAAMmB,MAAMgB,OAAOD,GAAaO,SAAtC,aAAmDzC,EAAMmB,MAAMgB,OAAOD,GAAaQ,SAAnF,KAGV/B,EADgD,YAA9CX,EAAMmB,MAAMgB,OAAOC,GAAkBI,KACrBxC,EAAMmB,MAAMgB,OAAOC,GAAkBG,KAExC,UAAMvC,EAAMmB,MAAMgB,OAAOC,GAAkBK,SAA3C,aAAwDzC,EAAMmB,MAAMgB,OAAOC,GAAkBM,SAA7F,KAEbpB,EAAMqB,eAAe,eAEvB9B,EAAuBS,EAAMsB,WAAWlB,cAAcC,MAAM,EAAG,IAC/DJ,EAAmBD,EAAMsB,WAAWb,WAAW,KAE/ClB,EAAuB,GACvBU,EAAmB,MAEjBA,GACFC,EAAsB3B,EACpBG,EAAMmB,MAAMmB,SACZf,IAEFf,EAAiBR,EAAMmB,MAAMmB,SAASd,GAAqBe,QACpChC,IACrBC,EAAiB,KAGnBA,EAAiB,GAIjB,cAAC,EAAD,CAEEE,WAAYA,EACZC,gBAAiBA,EACjBJ,gBAAiBA,EACjBC,eAAgBA,EAChBI,sBAAuBA,EACvBC,qBAAsBA,EACtBC,QAASQ,EAAMuB,OACf9B,eAAgBf,EAAMmB,MAAM2B,WAAW,GAAGC,OAC1C/B,MAAOM,EAAM0B,SACb9C,UAA6B,IAAlBoB,EAAM2B,QAAgB,OAAS,IAVrC3B,EAAM2B,YAejB,cAAC5C,EAAA,EAAD,CAAYF,QAAQ,KAApB,oCAiBO+C,EAXF,SAAClD,GACZ,IAAImD,EAAY,eAAQnD,EAAMmB,OAO9B,MAN+B,YAA3BnB,EAAMoD,WAAWC,QAInBF,EAAa/B,OAASpB,EAAMmB,MAAMC,OAAOO,MAAM,GAAG2B,WAE7C,cAAC,EAAD,CAAapC,UAAWlB,EAAMkB,UAAWC,MAAOgC,K,2DClJnDI,G,MAAa,CAEjBC,OAAQ,MACRC,QAAS,CACP,iBAAiB,GAAjB,OAAqBC,sDACrB,kBAAmB,wDACnBC,gBAAgB,KAIdC,EAAe,SAACC,GAEpB,IAAIC,EAAOD,EAAKE,cACZC,EAAKH,EAAKI,WAAa,EACvBC,EAAKL,EAAKM,UAQd,OAPIH,EAAK,KACPA,EAAK,IAAMA,GAETE,EAAK,KACPA,EAAK,IAAMA,GAED,UAAMJ,EAAN,YAAcE,EAAd,YAAoBE,IAI5BE,EAAaC,YAAW,CAE5BC,WAAY,CACVC,MAAO,QACP,YAAa,CACXA,MAAO,WAET,qBAAsB,CACpBC,gBAAiB,YAGrBC,QAAS,GACTC,MAAO,IAZUL,CAahBM,KAEGC,EAAaP,aAAW,SAACQ,GAAD,MAAY,CAExCC,KAAM,CACJP,MAAO,QACPC,gBAAiB,UACjB,UAAW,CACTA,gBAAiB,eANJH,CASfU,KAiQWC,EA/PF,WAAO,IAAD,EACmBC,mBAAS,IAD5B,mBACVC,EADU,KACEC,EADF,OAEeF,mBAAS,OAFxB,mBAEVG,EAFU,KAEAC,EAFA,OAGWJ,mBAAS,IAHpB,mBAGVK,EAHU,KAGFC,EAHE,OAIqBN,mBAAS,IAJ9B,mBAIVO,EAJU,KAIGC,EAJH,OAKyBR,mBAAS,IALlC,mBAKVS,EALU,KAKKC,EALL,OAMmCV,mBAAS,IAN5C,mBAMVW,EANU,KAMUC,EANV,OAOmBZ,oBAAS,GAP5B,mBAOVa,EAPU,KAOEC,EAPF,OAQmBd,mBAAS,IAAIe,MARhC,mBAQVC,EARU,KAQEC,EARF,OASejB,mBAAS,IAAIe,MAT5B,mBASVG,EATU,KASAC,EATA,OAUanB,mBAASrB,EAAa,IAAIoC,OAVvC,mBAUVK,EAVU,KAUDC,EAVC,OAWarB,mBAAS,IAXtB,oBAWVsB,GAXU,MAWDC,GAXC,SAYWvB,oBAAS,GAZpB,qBAYVwB,GAZU,MAYFC,GAZE,SAayBzB,mBAAS,IAblC,qBAaV0B,GAbU,MAaKC,GAbL,SAciB3B,oBAAS,GAd1B,qBAcV/D,GAdU,MAcC2F,GAdD,SAemB5B,mBAAS,UAf5B,qBAeV7B,GAfU,MAeE0D,GAfF,MAiBjBC,qBAAU,YAEa,uCAAG,8BAAAC,EAAA,+EAECC,MACnB,sGACA1D,GAJkB,cAEhB2D,EAFgB,gBAMHA,EAASC,OANN,OAMpBD,EANoB,OAOdE,EAAWF,EAASpE,WAAWzB,KAAI,SAACgG,GACxC,MAAO,CAAEhE,MAAOgE,EAAKC,KAAMC,MAAOF,EAAKC,SAEzCnC,EAAciC,GAVM,kDAYpBI,QAAQC,IAAR,MACAtC,EAAc,CAAC,CAAE9B,MAAO,MAAOkE,MAAO,SAblB,0DAAH,qDAgBrBG,KACC,IA8GH,OACE,mCACE,sBAAKxH,UAAU,OAAf,UACE,sBAAKA,UAAU,aAAf,UACE,qBAAKA,UAAU,gBAAf,SACE,cAAC,IAAD,CACEyH,QAASrC,EACTsC,cAnHe,SAACC,IAET,uCAAG,8BAAAb,EAAA,kEAEG,KAAfa,EAFY,iCAIOZ,MACnB,wGAAiG7B,EAAjG,YACE,IAAI0C,gBAAgB,CAAEC,MAAOF,IAC/BtE,GAPY,cAIV2D,EAJU,gBASGA,EAASC,OATZ,OASdD,EATc,OAURE,EAAWF,EAAS/E,OAAOd,KAAI,SAACgG,GAEpC,MAAO,CAAEhE,MAAOgE,EAAKzH,QAAS2H,MAAOF,EAAKW,cAE5CzC,EAAU6B,GAdI,0DAiBhBI,QAAQC,IAAR,MAjBgB,0DAAH,qDAoBjBQ,IA8FUC,SAAU,SAACL,GAAD,OAAgBlC,EAAiBkC,EAAWxE,QACtD8E,cAAc,EACdC,YAAY,SACZC,aAAc,GANhB,sBAWF,qBAAKnI,UAAU,gBAAf,SACE,cAAC,IAAD,CACEyH,QAASnC,EACToC,cAvGoB,SAACC,IAET,uCAAG,8BAAAb,EAAA,kEAEF,KAAfa,EAFiB,iCAGEZ,MACnB,wGAAiG7B,EAAjG,YACE,IAAI0C,gBAAgB,CAAEC,MAAOF,IAC/BtE,GANiB,cAGf2D,EAHe,gBAQFA,EAASC,OARP,OAQnBD,EARmB,OASbE,EAAWF,EAAS/E,OAAOd,KAAI,SAACgG,GACpC,MAAO,CAAEhE,MAAOgE,EAAKzH,QAAS2H,MAAOF,EAAKW,cAE5CvC,EAAe2B,GAZI,0DAerBI,QAAQC,IAAR,MAfqB,0DAAH,qDAkBtBa,IAoFUJ,SAAU,SAACL,GAAD,OAAgBhC,EAAsBgC,EAAWxE,QAC3D8E,cAAc,EACdC,YAAY,cACZC,aAAc,GANhB,2BAWF,sBAAKnI,UAAU,aAAf,UACE,uBAAOqI,MAAO,CAAEC,MAAO,QAAvB,6BACA,cAAC,IAAD,CACEN,SA7DmB,SAACO,GAG9B,GADAvC,EAAcuC,GACM,OAAhBA,EAAsB,CACxB,IAAIC,EAAW9E,EAAa6E,GAC5BnC,EAAWoC,QAEXpC,EAAW,YAuDHjD,MAAO4C,EACP0C,QAAS,IAAI3C,UAGhBS,GACC,sBAAKvG,UAAU,aAAf,UACE,uBAAOqI,MAAO,CAAEC,MAAO,QAAvB,4BACA,cAAC,IAAD,CACEnF,MAAO8C,EACP+B,SA5De,SAACO,GAE5B,GADArC,EAAYqC,GACQ,OAAhBA,EAAsB,CACxB,IAAIC,EAAW9E,EAAa6E,GAC5BjC,GAAWkC,QAEXlC,GAAW,YAuDDmC,QAAS,IAAI3C,UAIjB,gCAGJ,uBACA,sBAAK9F,UAAU,aAAf,UACE,qBAAKA,UAAU,SAAf,SACE,cAAC0I,EAAA,EAAD,CACEC,QACE,cAACzE,EAAD,CACEK,QAASgC,GACTyB,SAjEK,WAEnBxB,IAAWD,IACNA,IAEHD,GAAW,KA6DCsC,KAAK,WAGTvB,MAAM,kBAGV,qBAAKrH,UAAU,oBAAf,SACE,cAAC,IAAD,CACEyH,QAASzC,EACTgD,SAAU,SAACL,GAAD,OAAgBxC,EAAYwC,EAAWxE,QACjD8E,cAAc,EACdY,aAAc3D,EACdgD,YAAY,eAGhB,qBAAKlI,UAAU,oBAAf,SACE,cAAC,IAAD,CACEyH,QAAS,CACP,CAAEtE,MAAO,SAAUkE,MAAO,UAC1B,CAAElE,MAAO,UAAWkE,MAAO,YAE7BW,SAAUpB,GACVqB,cAAc,EACdY,aAAc3F,GACdgF,YAAY,kBAGhB,qBAAKG,MAAO,CAAES,OAAQ,OAAtB,SACE,cAACpE,EAAD,CACEL,MAAM,UACNpE,QAAQ,YACR8I,QArJU,YAEJ,uCAAG,4BAAAjC,EAAA,+EAEMC,MAAM,kGAAD,OAC0E7B,EAD1E,kBAC4FM,EAD5F,YAC6GE,EAD7G,YACmIS,EADnI,YAC8IE,IACtKhD,GAJa,cAEX2D,EAFW,gBAMEA,EAASC,OANX,YAMfD,EANe,QAOFgC,UAAWhC,EAASiC,OAPlB,sBAUP,IAAIC,MAAM,sBAVH,OAYfxC,GAAiBM,GACjBnB,GAAc,GACVmB,EAAS9F,OAAO1B,OAAS,EAE3BmH,IAAa,GAEbA,IAAa,GAlBA,kDAqBfW,QAAQC,IAAR,MACAZ,IAAa,GACbd,GAAc,GAvBC,0DAAH,qDA0BhBsD,IAsHQ,8BASJ,uBACCvD,EACC,cAAC,EAAD,CACE3E,MAAOwF,GACPzF,UAAWA,GACXkC,WAAYA,KAGd,mC,gBCzSKkG,EARA,SAACtJ,GACd,OACE,sBAAKE,UAAU,SAAf,UACGF,EAAMuJ,MADT,IACgB,cAAC,IAAD,QCALC,G,MAJA,SAACxJ,GACd,OAAO,qBAAKE,UAAU,SAAf,SAAyBF,EAAMuJ,UCYzBE,MAVf,WACE,OACE,sBAAKvJ,UAAU,MAAf,UACE,cAAC,EAAD,CAAQqJ,MAAM,kBACd,cAAC,EAAD,IACA,cAAC,EAAD,CAAQA,MAAM,aCNpBG,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.4658f5dc.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Info.css\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst placeFinder = (arr, id) => {\n  // Linear search to find a place given the PlaceId\n  let n = arr.length;\n  let i = 0;\n  for (i = 0; i < n; i++) {\n    if (arr[i].PlaceId === id) {\n      return i;\n    }\n  }\n  return null;\n};\n\nconst carrierFinder = (arr, id) => {\n  // Linear search to find a carrier given the CarrierId\n  let n = arr.length;\n  let i = 0;\n  for (i = 0; i < n; i++) {\n    if (arr[i].CarrierId === id) {\n      return i;\n    }\n  }\n  return null;\n};\n\nconst OutlinedCard = (props) => {\n  // Component to store route information to be displayed\n  return (\n    <div>\n      <Card className=\"root\" variant=\"outlined\">\n        <CardContent className={props.className}>\n          <Typography className=\"title\" gutterBottom>\n            {props.carrierOutbound}{\" \"}\n            {props.carrierInbound === \"\" ? (\n              <></>\n            ) : (\n              ` -- ${props.carrierInbound}`\n            )}\n          </Typography>\n          <Typography variant=\"h5\" component=\"h2\">\n            {`${props.originName} to ${props.destinationName}`}\n          </Typography>\n          <Typography className=\"pos\">\n            {`Departure Outbound Date: ${props.departureOutboundDate}`}{\" \"}\n          </Typography>\n          {props.departureInboundDate !== \"\" ? (\n            <Typography className=\"pos\">\n              {` Departure Inbound Date: ${props.departureInboundDate}`}\n            </Typography>\n          ) : (\n            <></>\n          )}{\" \"}\n          {props.nonStop ? \" (Nonstop)\" : \"\"}\n          <Typography variant=\"body1\" component=\"p\">\n            {props.currencySymbol + props.price}\n          </Typography>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nconst InfoWrapper = (props) => {\n  // Component to wrap route information and extract required information from API response\n  return (\n    <>\n      {props.areRoutes ? (\n        props.route.Quotes.map((quote) => {\n          let departureOutboundDate = quote.OutboundLeg.DepartureDate.slice(\n            0,\n            10\n          ); // Extracting \"yyyy-mm-dd\" string from the outbound leg\n          let originId = quote.OutboundLeg.OriginId;\n          let carrierOutboundId = quote.OutboundLeg.CarrierIds[0];\n          let destinationId = quote.OutboundLeg.DestinationId;\n          let originIndex = placeFinder(props.route.Places, originId); // Linear search to find where the origin is within Places array of response\n          let destinationIndex = placeFinder(props.route.Places, destinationId); // Finds destination within Places\n          let carrierOutboundIndex = carrierFinder(\n            props.route.Carriers,\n            carrierOutboundId\n          ); // Finds outbound carrier location\n          let carrierOutbound = props.route.Carriers[carrierOutboundIndex].Name;\n          let carrierInboundId;\n          let carrierInboundIndex;\n          let carrierInbound;\n          let departureInboundDate;\n          let originName;\n          let destinationName;\n\n          if (props.route.Places[originIndex].Type !== \"Station\") {\n            originName = props.route.Places[originIndex].Name; // If the location is not a station, extract name to be displayed\n          } else {\n            originName = `${props.route.Places[originIndex].CityName} (${props.route.Places[originIndex].IataCode})`; // If it is a station, use city name and iata code to describe instead\n          }\n          if (props.route.Places[destinationIndex].Type !== \"Station\") {\n            destinationName = props.route.Places[destinationIndex].Name;\n          } else {\n            destinationName = `${props.route.Places[destinationIndex].CityName} (${props.route.Places[destinationIndex].IataCode})`;\n          }\n          if (quote.hasOwnProperty(\"InboundLeg\")) {\n            // Extract inbound information if it exists\n            departureInboundDate = quote.InboundLeg.DepartureDate.slice(0, 10);\n            carrierInboundId = quote.InboundLeg.CarrierIds[0];\n          } else {\n            departureInboundDate = \"\";\n            carrierInboundId = null;\n          }\n          if (carrierInboundId) {\n            carrierInboundIndex = carrierFinder(\n              props.route.Carriers,\n              carrierInboundId\n            );\n            carrierInbound = props.route.Carriers[carrierInboundIndex].Name;\n            if (carrierInbound === carrierOutbound) {\n              carrierInbound = \"\";\n            }\n          } else {\n            carrierInbound = \"\";\n          }\n\n          return (\n            <OutlinedCard\n              key={quote.QuoteId}\n              originName={originName}\n              destinationName={destinationName}\n              carrierOutbound={carrierOutbound}\n              carrierInbound={carrierInbound}\n              departureOutboundDate={departureOutboundDate}\n              departureInboundDate={departureInboundDate}\n              nonStop={quote.Direct}\n              currencySymbol={props.route.Currencies[0].Symbol}\n              price={quote.MinPrice}\n              className={quote.QuoteId === 1 ? \"mini\" : \"\"}\n            />\n          );\n        })\n      ) : (\n        <Typography variant=\"h5\">No Routes Available</Typography>\n      )}\n    </>\n  );\n};\n\nconst Info = (props) => {\n  let copyResponse = { ...props.route };\n  if (props.sortOption.value === \"highest\") {\n    // Implementation of the sort functionality\n    // If sort from highest to lowest is selected, the quotes will be in reverse order since the API\n    // response is already sorted from lowest to highest\n    copyResponse.Quotes = props.route.Quotes.slice(0).reverse();\n  }\n  return <InfoWrapper areRoutes={props.areRoutes} route={copyResponse} />;\n};\n\nexport default Info;\n","import React, { useState, useEffect } from \"react\";\nimport Info from \"./Info\";\nimport Select from \"react-select\"; // Component for dropdown\nimport DatePicker from \"react-date-picker\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Switch from \"@material-ui/core/Switch\";\nimport Button from \"@material-ui/core/Button\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport \"./Main.css\";\n\nconst reqOptions = {\n  // Request options to use for each API request\n  method: \"GET\",\n  headers: {\n    \"x-rapidapi-key\": `${process.env.REACT_APP_API_KEY}`,\n    \"x-rapidapi-host\": \"skyscanner-skyscanner-flight-search-v1.p.rapidapi.com\",\n    useQueryString: true,\n  },\n};\n\nconst dateToString = (date) => {\n  // Function to convert date objects into yyyy-mm-dd string format\n  let yyyy = date.getFullYear();\n  let mm = date.getMonth() + 1;\n  let dd = date.getDate();\n  if (mm < 10) {\n    mm = \"0\" + mm;\n  }\n  if (dd < 10) {\n    dd = \"0\" + dd;\n  }\n  let fullDate = `${yyyy}-${mm}-${dd}`;\n  return fullDate;\n};\n\nconst BlueSwitch = withStyles({\n  // Style MaterialUI Switch Component\n  switchBase: {\n    color: \"white\",\n    \"&$checked\": {\n      color: \"#013d5b\",\n    },\n    \"&$checked + $track\": {\n      backgroundColor: \"#013d5b\",\n    },\n  },\n  checked: {},\n  track: {},\n})(Switch);\n\nconst BlueButton = withStyles((theme) => ({\n  // Style MaterialUI Button Component\n  root: {\n    color: \"white\",\n    backgroundColor: \"#013d5b\",\n    \"&:hover\": {\n      backgroundColor: \"#002a40\",\n    },\n  },\n}))(Button);\n\nconst Main = () => {\n  const [currencies, setCurrencies] = useState([]); // Store options for currency dropdown\n  const [currency, setCurrency] = useState(\"USD\"); // Defaulting currency to USD in case user forgets to select\n  const [origin, setOrigin] = useState([]); // Store options for origin dropdown\n  const [destination, setDestination] = useState([]); // Store options for destination dropdown\n  const [airportOrigin, setAirportOrigin] = useState(\"\"); // Store airport chosen from origin dropdown\n  const [airportDestination, setAirportDestination] = useState(\"\"); // Store airport chosen from destination dropdown\n  const [showRoutes, setShowRoutes] = useState(false); // Boolean to determine if routes are to be displayed\n  const [originDate, setOriginDate] = useState(new Date()); // Default option for origin datepicker calendar\n  const [destDate, setDestDate] = useState(new Date()); // Default option for destination datepicker calendar\n  const [obpDate, setObpDate] = useState(dateToString(new Date())); // Set default outbound partial date to today's date\n  const [ibpDate, setIbpDate] = useState(\"\"); // Inbound partial date defaulted to empty string\n  const [slider, setSlider] = useState(false); // Slider to choose if round trip or one way\n  const [routeResponse, setRouteResponse] = useState({}); // Store API response for finding routes\n  const [areRoutes, setAreRoutes] = useState(true); // Boolean to determine if routes exist\n  const [sortOption, setSortOption] = useState(\"lowest\"); // Defaulting to sort by lowest price\n\n  useEffect(() => {\n    // Send one time API request to fetch all currencies\n    const fetchCurrencies = async () => {\n      try {\n        let response = await fetch(\n          \"https://skyscanner-skyscanner-flight-search-v1.p.rapidapi.com/apiservices/reference/v1.0/currencies\",\n          reqOptions\n        );\n        response = await response.json();\n        const newArray = response.Currencies.map((item) => {\n          return { value: item.Code, label: item.Code };\n        });\n        setCurrencies(newArray);\n      } catch (error) {\n        console.log(error);\n        setCurrencies([{ value: \"USD\", label: \"USD\" }]);\n      }\n    };\n    fetchCurrencies();\n  }, []);\n\n  const handleChangeOrigin = (inputValue) => {\n    // Handler to find origin airports based on user input in dropdown\n    const fetchOrigin = async () => {\n      try {\n        if (inputValue !== \"\") {\n          // API Request made only if user inputted value\n          let response = await fetch(\n            `https://skyscanner-skyscanner-flight-search-v1.p.rapidapi.com/apiservices/autosuggest/v1.0/US/${currency}/en-US/?` +\n              new URLSearchParams({ query: inputValue }),\n            reqOptions\n          );\n          response = await response.json();\n          const newArray = response.Places.map((item) => {\n            // Extracting Airport ID and Place Name to use for dropdown\n            return { value: item.PlaceId, label: item.PlaceName };\n          });\n          setOrigin(newArray);\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    fetchOrigin();\n  };\n  const handleChangeDestination = (inputValue) => {\n    // Handler to find destination airports based on user input in dropdown\n    const fetchDestination = async () => {\n      try {\n        if (inputValue !== \"\") {\n          let response = await fetch(\n            `https://skyscanner-skyscanner-flight-search-v1.p.rapidapi.com/apiservices/autosuggest/v1.0/US/${currency}/en-US/?` +\n              new URLSearchParams({ query: inputValue }),\n            reqOptions\n          );\n          response = await response.json();\n          const newArray = response.Places.map((item) => {\n            return { value: item.PlaceId, label: item.PlaceName };\n          });\n          setDestination(newArray);\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    fetchDestination();\n  };\n\n  const handleOnClick = () => {\n    // Handler for \"Find Flight\" Button\n    const fetchRoute = async () => {\n      try {\n        let response = await fetch(\n          `https://skyscanner-skyscanner-flight-search-v1.p.rapidapi.com/apiservices/browsequotes/v1.0/US/${currency}/en-US/${airportOrigin}/${airportDestination}/${obpDate}/${ibpDate}`,\n          reqOptions\n        );\n        response = await response.json();\n        if (response.message || response.errors) {\n          // If the API response has a message field, there was an internal server error.\n          // If it has an errors field, then something went wrong with the API request itself, so an error is thrown\n          throw new Error(\"No Proper Response\");\n        }\n        setRouteResponse(response);\n        setShowRoutes(true);\n        if (response.Quotes.length < 1) {\n          // If the response returns successfully but there are no quotes, it means no routes have been found\n          setAreRoutes(false);\n        } else {\n          setAreRoutes(true);\n        }\n      } catch (error) {\n        console.log(error);\n        setAreRoutes(false);\n        setShowRoutes(true);\n      }\n    };\n    fetchRoute();\n  };\n\n  const handleOriginDateChange = (returnValue) => {\n    // Handler for when user selects a particular date in the calendar\n    setOriginDate(returnValue);\n    if (returnValue !== null) {\n      let fullDate = dateToString(returnValue);\n      setObpDate(fullDate);\n    } else {\n      setObpDate(\"anytime\");\n    }\n  };\n\n  const handleDestDateChange = (returnValue) => {\n    setDestDate(returnValue);\n    if (returnValue !== null) {\n      let fullDate = dateToString(returnValue);\n      setIbpDate(fullDate);\n    } else {\n      setIbpDate(\"anytime\");\n    }\n  };\n\n  const handleSlider = () => {\n    // Toggle for slider\n    setSlider(!slider);\n    if (!slider) {\n      // If the slider is set to false, it means one way, so no inbound partial date\n      setIbpDate(\"\");\n    }\n  };\n\n  return (\n    <>\n      <div className=\"main\">\n        <div className=\"container1\">\n          <div className=\"dropdownPlace\">\n            <Select\n              options={origin}\n              onInputChange={handleChangeOrigin}\n              onChange={(inputValue) => setAirportOrigin(inputValue.value)}\n              isSearchable={true}\n              placeholder=\"Origin\"\n              filterOption={\"\"}\n            >\n              Origin\n            </Select>\n          </div>\n          <div className=\"dropdownPlace\">\n            <Select\n              options={destination}\n              onInputChange={handleChangeDestination}\n              onChange={(inputValue) => setAirportDestination(inputValue.value)}\n              isSearchable={true}\n              placeholder=\"Destination\"\n              filterOption={\"\"}\n            >\n              Destination\n            </Select>\n          </div>\n          <div className=\"datePicker\">\n            <label style={{ width: \"50px\" }}>Outbound Date: </label>\n            <DatePicker\n              onChange={handleOriginDateChange}\n              value={originDate}\n              minDate={new Date()}\n            ></DatePicker>\n          </div>\n          {slider ? (\n            <div className=\"datePicker\">\n              <label style={{ width: \"50px\" }}>Inbound Date: </label>\n              <DatePicker\n                value={destDate}\n                onChange={handleDestDateChange}\n                minDate={new Date()}\n              ></DatePicker>\n            </div>\n          ) : (\n            <></>\n          )}\n        </div>\n        <br />\n        <div className=\"container2\">\n          <div className=\"switch\">\n            <FormControlLabel\n              control={\n                <BlueSwitch\n                  checked={slider}\n                  onChange={handleSlider}\n                  name=\"slider\"\n                />\n              }\n              label=\"Round Trip?\"\n            />\n          </div>\n          <div className=\"dropdownSecondary\">\n            <Select\n              options={currencies}\n              onChange={(inputValue) => setCurrency(inputValue.value)}\n              isSearchable={true}\n              defaultValue={currency}\n              placeholder=\"Currency\"\n            ></Select>\n          </div>\n          <div className=\"dropdownSecondary\">\n            <Select\n              options={[\n                { value: \"lowest\", label: \"Lowest\" },\n                { value: \"highest\", label: \"Highest\" },\n              ]}\n              onChange={setSortOption}\n              isSearchable={false}\n              defaultValue={sortOption}\n              placeholder=\"Sort Prices\"\n            ></Select>\n          </div>\n          <div style={{ margin: \"5px\" }}>\n            <BlueButton\n              color=\"primary\"\n              variant=\"contained\"\n              onClick={handleOnClick}\n            >\n              Find Flight\n            </BlueButton>\n          </div>\n        </div>\n        <br />\n        {showRoutes ? (\n          <Info\n            route={routeResponse}\n            areRoutes={areRoutes}\n            sortOption={sortOption}\n          ></Info>\n        ) : (\n          <></>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default Main;\n","import React from \"react\";\nimport \"./Header.css\";\nimport { IoMdAirplane } from \"react-icons/io\";\n\nconst Header = (props) => {\n  return (\n    <div className=\"header\">\n      {props.title} <IoMdAirplane />\n    </div>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport \"./Footer.css\";\n\nconst Footer = (props) => {\n  return <div className=\"footer\">{props.title}</div>;\n};\n\nexport default Footer;\n","import \"./App.css\";\nimport React from \"react\";\nimport Main from \"./components/Main\";\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header title=\"Flight Finder\" />\n      <Main />\n      <Footer title=\"2021\" />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}